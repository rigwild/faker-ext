import { loadConfiguration, FAKER_EXTENSION_CONFIG, FAKER_USER_AGENT, chrome } from './config'

/**
 * Upload the text post to the self-hosted server and get its URI
 * @param content Post content
 * @param websiteURL URL of the website where the post comes from
 * @returns Link to the self-hosted content
 */
async function uploadTextPostToServer(content: string, websiteURL: URL): Promise<string> {
  const summary = content.length > 50 ? `${content.slice(0, 50)}...` : content
  console.log(`[Faker][Background] Uploading the post "${summary}"...`)

  const res = await fetch(`${FAKER_EXTENSION_CONFIG.serverUri}/api/posts/upload`, {
    method: 'POST',
    body: JSON.stringify({ content }),
    headers: {
      'User-Agent': FAKER_USER_AGENT,
      'Content-Type': 'application/json',
      'X-Faker-Domain': websiteURL.hostname
    }
  })
  const resJson = await res.json()
  if (!res.ok) throw new Error(resJson.message)

  const { externalUri } = resJson
  const fullExternalUri = `${FAKER_EXTENSION_CONFIG.serverUri}${externalUri}`
  console.log(`[Faker][Background] External link generated by the server for text post: ${fullExternalUri}`)
  return fullExternalUri
}

/**
 * Upload the media to the self-hosted server and get its URI
 * @param media Uploaded media
 * @param websiteURL URL of the website where the media comes from
 * @returns Link to the self-hosted content
 */
async function uploadMediaToServer(media: File, websiteURL: URL): Promise<string> {
  console.log(`[Faker][Extension] Uploading the media "${media.name}" with type "${media.type}"...`)

  const formData = new FormData()
  formData.append('media', media, media.name)

  const res = await fetch(`${FAKER_EXTENSION_CONFIG.serverUri}/api/posts/upload`, {
    method: 'POST',
    body: formData,
    headers: {
      'User-Agent': FAKER_USER_AGENT,
      'X-Faker-Domain': websiteURL.hostname
    }
  })
  const resJson = await res.json()
  if (!res.ok) throw new Error(resJson.message)

  const { externalUri } = resJson
  const fullExternalUri = `${FAKER_EXTENSION_CONFIG.serverUri}${externalUri}`
  console.log(`[Faker][Extension] External link generated by the server for media: ${fullExternalUri}`)
  return fullExternalUri
}

function sendMessage(tab: { id: number }, message: any) {
  return new Promise(resolve => chrome.tabs.sendMessage(tab.id, message, (response: any) => resolve(response)))
}

async function contextMenuHandler(
  info: Record<string, any> & { editable: boolean; pageUrl: string; selectionText: string },
  tab: Record<string, any> & { id: number }
) {
  // Upload the selected text only if the element is editable (an input/textarea)
  if (info.editable && info.selectionText) {
    await sendMessage(tab, { action: 'UPLOAD_START' })
    const fullExternalUri = await uploadTextPostToServer(info.selectionText, new URL(info.pageUrl))
    await sendMessage(tab, { action: 'UPLOAD_END', fullExternalUri })
  }
}

loadConfiguration().then(() => {
  chrome.contextMenus.create({
    title: 'Replace with Faker',
    contexts: [/*'all'*/ 'editable'],
    onclick: contextMenuHandler
  })
})
