import { FAKER_EXTENSION_CONFIG, FAKER_USER_AGENT } from './config'

export type Post = { content: string; timestamp: Date }

export type QRCodeGenerator = {
  generate(data: string, settings: Record<string, any>): any
  generateHTML(data: string, settings: Record<string, any>): any
  generatePNG(data: string, settings: Record<string, any>): any
  generateSVG(data: string, settings: Record<string, any>): any
}

export const delay = (ms: number): Promise<void> => new Promise(res => setTimeout(res, ms))

export const isValidHttpUrl = (str: string) => {
  let url: URL
  try {
    url = new URL(str)
  } catch {
    return false
  }
  return url.protocol === 'http:' || url.protocol === 'https:'
}

/**
 * Convert a base64 dataURL to a File object
 * @param dataurl Base64 dataURL
 * @param filename File name
 * @see https://stackoverflow.com/a/38935990
 */
export const dataURLtoFile = (dataurl: string, filename: string): File => {
  const arr = dataurl.split(',')
  const mime = arr[0].match(/:(.*?);/)[1]
  const bstr = atob(arr[1])
  let n = bstr.length
  let u8arr = new Uint8Array(n)

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }

  return new File([u8arr], filename, { type: mime })
}

export function filetoBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result as string)
    reader.onerror = error => reject(error)
  })
}

export function generateQRCode(QRCode: QRCodeGenerator, str: string): File {
  const qrCode = QRCode.generatePNG(str, {
    ecclevel: 'M',
    fillcolor: '#FFFFFF',
    textcolor: '#000000',
    margin: 2,
    modulesize: 28
  })
  return dataURLtoFile(qrCode, 'qr.png')
}

/**
 * Upload the text post to the self-hosted server and get its URI
 * @param content Post content
 * @param websiteURL URL of the website where the post comes from
 * @returns Link to the self-hosted content
 */
export async function uploadTextPostToServer(content: string, websiteURL: URL): Promise<string> {
  const summary = content.length > 50 ? `${content.slice(0, 50)}...` : content
  console.log(`[Faker][Background] Uploading the post "${summary}"...`)

  const res = await fetch(`${FAKER_EXTENSION_CONFIG.serverUri}/api/posts/upload`, {
    method: 'POST',
    body: JSON.stringify({ content }),
    headers: {
      'User-Agent': FAKER_USER_AGENT,
      'Content-Type': 'application/json',
      Authorization: `Basic ${btoa(
        `${FAKER_EXTENSION_CONFIG.serverUsername}:${FAKER_EXTENSION_CONFIG.serverPassword}`
      )}`,
      'X-Faker-Domain': websiteURL.hostname
    }
  })
  const resJson = await res.json()
  if (!res.ok) throw new Error(resJson.message)

  const { externalUri } = resJson
  const fullExternalUri = `${FAKER_EXTENSION_CONFIG.serverUri}${externalUri}`
  console.log(`[Faker][Background] External link generated by the server for text post: ${fullExternalUri}`)
  return fullExternalUri
}

/**
 * Upload the media to the self-hosted server and get its URI
 * @param media Uploaded media
 * @param websiteURL URL of the website where the media comes from
 * @returns Link to the self-hosted content
 */
export async function uploadMediaToServer(media: File, websiteURL: URL): Promise<string> {
  console.log(`[Faker][Extension] Uploading the media "${media.name}" with type "${media.type}"...`)

  const formData = new FormData()
  formData.append('media', media)

  const res = await fetch(`${FAKER_EXTENSION_CONFIG.serverUri}/api/posts/upload`, {
    method: 'POST',
    body: formData,
    headers: {
      'User-Agent': FAKER_USER_AGENT,
      Authorization: `Basic ${btoa(
        `${FAKER_EXTENSION_CONFIG.serverUsername}:${FAKER_EXTENSION_CONFIG.serverPassword}`
      )}`,
      'X-Faker-Domain': websiteURL.hostname
    }
  })
  const resJson = await res.json()
  if (!res.ok) throw new Error(resJson.message)

  const { externalUri } = resJson
  const fullExternalUri = `${FAKER_EXTENSION_CONFIG.serverUri}${externalUri}`
  console.log(`[Faker][Extension] External link generated by the server for media: ${fullExternalUri}`)
  return fullExternalUri
}

/**
 * Upload the text post to the self-hosted server and get its URI
 * @param content Post content
 * @param websiteURL URL of the website where the post comes from
 * @returns Link to the self-hosted content
 */
export async function deleteContentFromServer(id: string): Promise<void> {
  console.log(`[Faker][Background] Deleting the post with ID "${id}"...`)

  const res = await fetch(`${FAKER_EXTENSION_CONFIG.serverUri}/api/posts`, {
    method: 'DELETE',
    headers: {
      'User-Agent': FAKER_USER_AGENT,
      'Content-Type': 'application/json',
      Authorization: `Basic ${btoa(
        `${FAKER_EXTENSION_CONFIG.serverUsername}:${FAKER_EXTENSION_CONFIG.serverPassword}`
      )}`
    }
  })
  const resJson = await res.json()
  if (!res.ok) throw new Error(resJson.message)

  const { externalUri } = resJson
  const fullExternalUri = `${FAKER_EXTENSION_CONFIG.serverUri}${externalUri}`
  console.log(`[Faker][Background] External link generated by the server for text post: ${fullExternalUri}`)
}
